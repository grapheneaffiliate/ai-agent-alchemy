# MCP AI Agent – Enhanced Operating Guidelines

## 🎯 Mission Context (Enhanced)
**Production-ready autonomous agent** with enterprise-grade reliability, comprehensive observability, and extensive plugin ecosystem targeting 90%+ async adoption.

**Core Systems:**
- **🏗️ Agent Core**: Enhanced orchestration with async-first design
- **🔌 Plugin Ecosystem**: 9 production plugins with type safety and resilience
- **📊 Observability**: Structured logging, metrics collection, performance monitoring
- **🛡️ Reliability**: Circuit breaker, retry logic, comprehensive error handling
- **📚 Documentation**: MkDocs-powered documentation with API references

**Current Status:**
- **Async Adoption**: 38.9% (tracking toward 90% target)
- **Test Coverage**: 77.8% with modern async patterns
- **Documentation**: 100% with 40 comprehensive guides
- **Code Quality**: 97.5/100 complexity score

## 🚀 Enhanced Feature Set

### Production Plugins (9 total)
| Plugin | Status | Enhancement Level | Owner |
|--------|--------|------------------|-------|
| **analysis** | ✅ Enhanced | Type stubs + performance tracking | @grapheneaffiliate |
| **browser** | ✅ Enhanced | Web automation with resilience | @grapheneaffiliate |
| **crawl4ai** | ✅ Enhanced | AI-powered crawling | @grapheneaffiliate |
| **enhanced_news** | ✅ Enhanced | Dynamic aggregation with dashboards | @grapheneaffiliate |
| **kokoro_tts** | ✅ Enhanced | Text-to-speech integration | @grapheneaffiliate |
| **leann** | ✅ Enhanced | Semantic search and RAG | @grapheneaffiliate |
| **news_fetch** | ✅ Enhanced | News processing pipeline | @grapheneaffiliate |
| **search** | ✅ Enhanced | Enhanced search capabilities | @grapheneaffiliate |
| **time_utils** | ✅ Enhanced | Time/date utilities | @grapheneaffiliate |

### Enhanced Systems
- **📊 Metrics Collection**: Prometheus-compatible monitoring with 8 metric types
- **🔄 Retry Logic**: 5 backoff strategies with circuit breaker protection
- **❌ Error Hierarchy**: 15+ error types with structured classification
- **📝 Structured Logging**: Context propagation with performance tracking
- **⚡ Async Tracking**: Real-time KPI monitoring and migration planning

## 🛠️ Development Workflow (Enhanced)

### Environment Setup
```powershell
# Install with all development tools
pip install -e ".[dev]"

# Verify enhanced systems
python -c "from agent.core import Agent; from agent.async_tracker import async_tracker; print('✅ Enhanced MCP AI Agent ready!')"
```

### Quality Assurance Pipeline
```powershell
# Run complete quality pipeline
.\scripts\quality_check.bat

# Individual quality checks
python -m pytest tests/smoke_tests/ -v                    # Refactor guards
python -m mypy src/agent/ --strict                        # Type checking
python -c "from agent.async_tracker import print_async_adoption_report; print_async_adoption_report()"  # Async KPI
```

### Documentation Workflow
```powershell
# Serve documentation locally
mkdocs serve

# Build production documentation
mkdocs build --strict

# Check documentation links
mkdocs build --strict
```

### Testing Strategy (Enhanced)
| Test Type | Command | Coverage | Notes |
|-----------|---------|----------|-------|
| **Smoke Tests** | `pytest tests/smoke_tests/ -v` | Core functionality | ✅ Refactor guards |
| **Unit Tests** | `pytest tests/unit/ -v` | 77.8% | ✅ Async-compatible |
| **Integration** | `pytest tests/integration/ -v` | Cross-component | ✅ Enhanced fixtures |
| **Contract** | `pytest tests/contract/ -v` | API contracts | ✅ Behavior validation |
| **Performance** | `pytest tests/ -k "performance"` | Benchmarks | ✅ Regression tracking |

**Enhanced Testing Features:**
- **Async Adoption**: 38.9% of tests use modern async patterns
- **Performance Tracking**: Automatic timing and metrics collection
- **Error Simulation**: Comprehensive error condition testing
- **Refactor Guards**: Smoke tests prevent regression during refactoring

## 🚀 Runtime & Operations (Enhanced)

### Primary Entry Points
```bash
# Interactive CLI session
agent

# OpenAI-compatible API server
agent serve

# Check async adoption status
python -c "from agent.async_tracker import print_async_adoption_report; print_async_adoption_report()"
```

### Enhanced CLI Features
```bash
# Tool execution with enhanced error handling
agent tool execute "plugin_name" "tool_name" --args '{"param": "value"}'

# Server with enhanced observability
agent serve --port 8000 --host 0.0.0.0

# Async migration planning
python -c "from agent.async_tracker import async_tracker; print(async_tracker.generate_migration_plan())"
```

### Production Operations
```bash
# Health monitoring
curl http://localhost:8000/health

# Metrics endpoint (Prometheus format)
curl http://localhost:8000/metrics

# Structured logging (JSON format)
tail -f agent.log | jq .
```

## 📚 Documentation Ecosystem (Enhanced)

### Documentation Structure
```
docs/
├── index.md                    # Enhanced project overview
├── api/                        # API reference documentation
│   ├── agent-core.md          # Core orchestration API
│   ├── plugin-system.md       # Plugin architecture
│   ├── errors.md              # Error handling reference
│   ├── logging.md             # Structured logging
│   ├── metrics.md             # Performance monitoring
│   └── retry-utils.md         # Resilience patterns
├── plugins/                   # Plugin documentation
├── development/               # Development guides
├── operations/                # Operations guides
└── enhancement-guides/        # Enhancement documentation
    ├── ASYNC_MIGRATION_GUIDE.md
    ├── MODULE_SPLIT_PROPOSAL.md
    └── TYPING_TOOLCHAIN_DECISION.md
```

### Key Documentation
- **[📚 Full Documentation](https://grapheneaffiliate.github.io/ai-agent-alchemy)** - Complete documentation site
- **[🚀 README.md](README.md)** - Comprehensive project overview with current status
- **[⚡ Async Migration Guide](docs/ASYNC_MIGRATION_GUIDE.md)** - Path to 90% async adoption
- **[🏗️ Module Architecture](docs/MODULE_SPLIT_PROPOSAL.md)** - Clean architecture proposal
- **[📝 Enhancement Progress](README.md#enhancement-progress)** - 13/17 major enhancements completed

## 🔧 Enhanced Tooling & Automation

### Code Quality Tools
```bash
# Enhanced linting and formatting
ruff check src/ tests/                    # Linting
black src/ tests/                         # Formatting
isort src/ tests/                         # Import sorting

# Enhanced type checking
mypy src/agent/ --strict                  # Agent modules (strict)
mypy src/plugins/ --ignore-missing-imports # Plugins (lenient)

# Security scanning
safety check                              # Dependency vulnerabilities
```

### Development Tools
```bash
# Async adoption tracking
python -m agent.async_tracker             # CLI async analysis
python -c "from agent.async_tracker import track_async_adoption_kpi; track_async_adoption_kpi()"

# Performance monitoring
python -c "from agent.metrics import dashboard; print(dashboard.generate_dashboard())"

# Error analysis
python -c "from agent.errors import ErrorContext; print('Enhanced error handling ready')"
```

### CI/CD Pipeline (Enhanced)
```yaml
# .github/workflows/cicd-pipeline.yml includes:
- Quality Gates (linting, type checking, security)
- Async Adoption KPI tracking
- Multi-Python version testing (3.11, 3.12)
- Performance benchmarking
- Documentation building
- Container building and deployment
- Post-deploy verification
```

## 📊 Enhanced Monitoring & Observability

### Metrics Collection
```python
from agent.metrics import metrics, track_performance

# Automatic performance tracking
@track_performance("plugin_operation", plugin="news")
async def fetch_news():
    # Operation automatically tracked
    pass

# Manual metrics recording
metrics.increment("custom_counter", labels={"status": "success"})
metrics.histogram("operation_duration", duration_ms=150)
```

### Structured Logging
```python
from agent.logging_utils import get_logger, LogComponent, async_logging_context

logger = get_logger("my_component", LogComponent.PLUGIN)

async def my_operation():
    async with async_logging_context(
        operation="data_processing",
        component=LogComponent.PLUGIN,
        metadata={"records": 100}
    ):
        # Automatic context propagation
        logger.info("Processing data", operation="data_processing")
```

### Error Handling
```python
from agent.errors import ErrorContext, PluginExecutionError

async def robust_operation():
    async with ErrorContext("my_operation", context_id="abc123"):
        # Automatic error conversion and logging
        # Structured error reporting with context
        pass
```

## 🎯 Enhancement Standards

### Code Quality Standards
1. **🎯 Type Safety**: All new code must pass mypy checks
2. **📝 Documentation**: All public APIs must be documented
3. **🧪 Testing**: New features must include comprehensive tests
4. **📏 Code Style**: Follow black/isort/ruff standards
5. **🔒 Security**: No hardcoded secrets or vulnerabilities

### Async Migration Standards
1. **📊 KPI Tracking**: All async changes must update adoption metrics
2. **🛡️ Error Handling**: Async functions must handle errors appropriately
3. **📝 Context Propagation**: Use logging context managers for traceability
4. **⚡ Performance**: Monitor async operation performance
5. **🧪 Testing**: Include async tests for async functions

### Documentation Standards
1. **📚 API Documentation**: All public APIs documented in MkDocs
2. **🚀 Enhancement Tracking**: Update README and docs for new features
3. **🔗 Cross-references**: Maintain links between related documentation
4. **📖 User Guides**: Provide practical examples and use cases

## 🔄 Change Management (Enhanced)

### Update Requirements
When making changes, update:
1. **📚 Documentation**: README.md, relevant docs, and MkDocs navigation
2. **📝 CHANGELOG.md**: Record behavior, config, and test structure changes
3. **🧪 Tests**: Add tests for new functionality, update existing tests
4. **📊 Metrics**: Update async adoption tracking if applicable
5. **🔧 CI/CD**: Update pipeline if new dependencies or build steps needed

### Enhancement Integration
1. **🏗️ Architecture**: Follow proposed module split for new components
2. **📊 Observability**: Add metrics and logging for new features
3. **🛡️ Reliability**: Include error handling and retry logic
4. **🎯 Type Safety**: Add type annotations and pass mypy checks
5. **📚 Documentation**: Document new features in appropriate guides

## 🚨 Platform & Shell Expectations (Enhanced)

### Windows PowerShell Environment
- **Shell Commands**: Use PowerShell syntax and cmdlets
- **Path Handling**: Use backslashes `\` and `Join-Path` for paths
- **Script Execution**: Prefix scripts with `.\` (e.g., `.\restart_server.bat`)
- **Python Execution**: Use `python` command (e.g., `python -m pytest`)

### Enhanced Development Commands
```powershell
# Enhanced quality pipeline
python -m pytest tests/smoke_tests/ -v
python -m mypy src/agent/ --strict
python -c "from agent.async_tracker import print_async_adoption_report; print_async_adoption_report()"

# Enhanced documentation
mkdocs serve
mkdocs build --strict

# Enhanced metrics and monitoring
python -c "from agent.metrics import dashboard; dashboard.generate_dashboard()"
```

## 🎉 Success Metrics

### Current Achievement
- **✅ 13/17 Major Enhancements Completed** (76% complete)
- **✅ Production-Ready Reliability** with circuit breaker and retry logic
- **✅ Enterprise Observability** with structured logging and metrics
- **✅ Comprehensive Documentation** with MkDocs and API references
- **✅ Enhanced Type Safety** with mypy and plugin stubs

### Path to 100% Completion
- **📊 Observability Stack**: OpenTelemetry integration (in progress)
- **🔗 Import Dependency Graph**: 338 import visualization (in progress)
- **📚 Plugin Guide Aggregation**: Index 37 docs (remaining)
- **📏 LOC Enforcement**: <200 LOC targets via CI (remaining)

---

**🚀 Enhanced MCP AI Agent - Production Ready with Enterprise Reliability** 🎯

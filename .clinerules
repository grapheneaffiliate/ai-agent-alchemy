# MCP AI Agent – Current Operating Notes

## Mission Snapshot
- Production-focused autonomous agent with MCP tool orchestration, LEANN self-analysis, browser/crawl automation, news aggregation, and artifact generation.
- Tool catalog kept in `src/plugins/` with time utilities, browser automation, Crawl4AI, news, search, LEANN, and Kokoro TTS integrations.
- Manual verification scripts, exploratory notebooks, and legacy tests now live under `scripts/` (`scripts/manual/*`, `scripts/maintenance/*`).

## Platform & Shell Expectations
- **Windows PowerShell** environment.
- Use `Get-Content`, `Select-String`, `Select-Object` instead of Unix `cat`, `grep`, `head`, `tail`.
- Prefix local scripts with `.\` (e.g., `.\restart_server.bat`).
- Python entry points should be invoked with `python` (e.g., `python -m pytest ...`).

## Runtime & CLI
- Primary server/UI entry point: `python -m uvicorn src.agent.server:app --host 0.0.0.0 --port 9000` (or `python scripts/manual/start_custom_ui.py`).
- CLI commands via Typer app: `python -m src.agent.cli run` and `python -m src.agent.cli add-tool --name NAME --server SERVER --tool-name TOOL [--args-schema JSON]`.
  - CLI sanitises quoted option values; JSON schema must parse to a dict.

## Test Strategy (Automated Suites)
| Suite | Command | Notes |
|-------|---------|-------|
| Unit | `python -m pytest tests/unit -q` | 69 tests, no async plugins required; manual async scripts relocated. |
| Integration | `python -m pytest tests/integration -q` | 6 tests covering API/browser/news flows. |
| Contract | `python -m pytest tests/contract -q` | 5 Typer CLI contracts; ensure CLI changes maintain exit codes. |

- Manual/legacy scripts (previous standalone async tests, verification scripts) are in `scripts/manual/` and `scripts/maintenance/`.
- When editing tests, prefer asserts over returning booleans to avoid PytestReturnNotNone warnings.

## Tooling & Compatibility
- `TimeUtils` compatibility: class re-exported from `src/plugins/time_utils.py` for legacy imports.
- Enhanced news logic split between `src/plugins/enhanced_news.py` (orchestrator) and `src/plugins/enhanced_news_components.py` (implementation).
- Logging: `src/agent/react_loop.py`, `src/plugins/browser.py`, and enhanced news components use structured logging via Python `logging`.

## Documentation & Change Tracking
- Project overview and quick start: `README.md` (mentions new test layout, scripts, and CLI usage).
- Update `CHANGELOG.md` for any behaviour/config/test-structure change.
- Archived/deprecated guides reside in `docs/archive/`; keep references current when relocating files.

## Expectations When Modifying Code
1. Honour Windows shell constraints.
2. Keep CLI options backwards compatible and documented.
3. Run appropriate pytest suites after significant changes.
4. Update README and CHANGELOG if interfaces, tooling, or directories move.
5. Maintain alignment between automated tests and documentation (manual scripts stay out of `tests/`).
